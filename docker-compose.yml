services:
  backend:
    build:
      network: "host"
      context: ./backend
      dockerfile: Dockerfile
    command: poetry run python manage.py runserver 0.0.0.0:8000
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/code
      - static-data:/backend/static
      - media-data:/backend/media
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    tty: true

  frontend:
    build:
      network: host
      context: ./frontend
      dockerfile: Dockerfile
    command: npm run dev -- -o
    tmpfs:
      - '/tmp/nitro'
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/frontend
      - node_modules:/frontend/node_modules
      - _nuxt:/frontend/.nuxt
      - _output:/frontend/output
#    depends_on:
#      - backend
    tty: true

  db:
    image: postgres:15
    env_file:
      - .env
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - pg-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $POSTGRES_USER" ]
      interval: 10s
      timeout: 5s
      retries: 5


volumes:
  pg-data:
  static-data:
  media-data:
  node_modules:
  _nuxt:
  _output:
